{"version":3,"sources":["webpack:///./src/components/severityLabel.js","webpack:///./src/templates/response.js"],"names":["labelMap","1","2","3","4","ranking","severityLabel","rootClass","cn","toLowerCase","className","responsePageData","pageContext","response","description","links","severity","title","provider","name","to","type","id","code","reply","dangerouslySetInnerHTML","__html","descriptionLabel","length","map","link","key","href","target","rel","linkList","blankState","updateOnScroll"],"mappings":"6FAAA,8CAGMA,EAAW,CACfC,EAAG,MACHC,EAAG,SACHC,EAAG,OACHC,EAAG,YAGU,gBAAgB,IAAdC,EAAa,EAAbA,QACf,IAAKA,EAAS,OAAO,4BACrB,IAAMC,EAAgBN,EAASK,GACzBE,EAAYC,IAAG,WAAD,aAA0BF,EAAcG,eAE5D,OACE,uBAAGC,UAAWH,GACXD,EADH,e,wICRW,sBAA4C,IAA1BK,EAAyB,EAAxCC,YAAeD,iBAAyB,EACLA,EAAiBE,SAA5DC,EADgD,EAChDA,YAAaC,EADmC,EACnCA,MAAOF,EAD4B,EAC5BA,SAAUG,EADkB,EAClBA,SAiCtC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAUN,EAAiBO,SAASC,KAA/B,KAAwCN,EAAYC,YAAaA,GAAeD,IAE1F,yBAAKH,UAAU,YACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,qBACZ,kBAAC,OAAD,CAAMU,GAAE,IAAMT,EAAiBU,KAAvB,IAA+BV,EAAiBO,SAASI,IAAOX,EAAiBO,SAASC,MADpG,IACiH,0BAAMT,UAAU,kBAAhB,KADjH,oBAC2K,kBAAC,OAAD,CAAMU,GAAE,SAAWT,EAAiBY,KAAKC,OAAUb,EAAiBY,KAAKC,QAEpP,wBAAId,UAAU,kBAAkBG,GAChC,kBAAC,IAAD,CAAeR,QAASW,IAzCP,WACvB,GAAoB,KAAhBF,EACF,OACE,uBAAGJ,UAAU,uBAAuBe,wBAAyB,CAAEC,OAAQZ,KAwCpEa,GA3BQ,WACf,GAAIZ,EAAMa,OAAS,EACjB,OACE,yBAAKlB,UAAU,YACb,6CACA,4BACGK,EAAMc,KAAI,SAAAC,GAAI,OACb,wBAAIC,IAAKD,GAAM,uBAAGE,KAAMF,EAAMG,OAAO,SAASC,IAAI,uBAAuBJ,SAqB5EK,GApCU,WACjB,IAAKrB,GAAgC,IAAjBC,EAAMa,OACxB,OACE,uBAAGlB,UAAU,wBAAb,wEAAyG,kBAAC,OAAD,CAAMU,GAAI,eAAV,cAAzG,KAkCGgB,KAGL,kBAAC,IAAD,CAAeC,gBAAgB","file":"component---src-templates-response-js-0f3f50b01ce75575dd8a.js","sourcesContent":["import React from 'react'\nimport cn from 'classnames'\n\nconst labelMap = {\n  1: 'Low',\n  2: 'Medium',\n  3: 'High',\n  4: 'Critical'\n}\n\nexport default ({ranking}) => {\n  if (!ranking) return <p></p>\n  const severityLabel = labelMap[ranking]\n  const rootClass = cn('severity', `severity--${severityLabel.toLowerCase()}`)\n\n  return (\n    <p className={rootClass}>\n      {severityLabel} severity\n    </p>\n  )\n\n}\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport DividerGlitch from '../components/dividerGlitch'\nimport SeverityLabel from '../components/severityLabel'\n\nexport default ({ pageContext: { responsePageData } }) => {\n  const { description, links, response, severity } = responsePageData.response\n\n  const descriptionLabel = () => {\n    if (description !== '') {\n      return (\n        <p className='masthead_description' dangerouslySetInnerHTML={{ __html: description }}></p>\n      )\n    }\n  }\n\n  const blankState = () => {\n    if (!description && links.length === 0) {\n      return (\n        <p className='masthead_description'>This SMTP response doesnâ€™t have any information yet. Be the first to <Link to={'/contribute'}>contribute</Link>!</p>\n      )\n    }\n  }\n\n  const linkList = () => {\n    if (links.length > 0) {\n      return (\n        <div className=\"doc-list\">\n          <h4>Documentation</h4>\n          <ul>\n            {links.map(link => (\n              <li key={link}><a href={link} target=\"_blank\" rel=\"noopener noreferrer\">{link}</a></li>\n            ))}\n          </ul>\n        </div>\n      )\n    }\n  }\n\n  return (\n    <Layout>\n      <SEO title={`${responsePageData.provider.name}: ${response}`} description={description || response} />\n\n      <div className='masthead'>\n        <div className='container'>\n          <h2 className=\"masthead_subtitle\">\n            <Link to={`/${responsePageData.type}/${responsePageData.provider.id}`}>{responsePageData.provider.name}</Link> <span className='masthead_slash'>/</span> SMTP error code <Link to={`/code/${responsePageData.code.reply}`}>{responsePageData.code.reply}</Link>\n          </h2>\n          <h1 className='masthead_title'>{response}</h1>\n          <SeverityLabel ranking={severity} />\n\n          {descriptionLabel()}\n          {linkList()}\n          {blankState()}\n        </div>\n      </div>\n      <DividerGlitch updateOnScroll={true} />\n\n    </Layout>\n  )\n}\n"],"sourceRoot":""}